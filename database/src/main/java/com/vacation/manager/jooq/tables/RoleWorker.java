/*
 * This file is generated by jOOQ.
 */
package com.vacation.manager.jooq.tables;


import com.vacation.manager.jooq.Company;
import com.vacation.manager.jooq.Keys;
import com.vacation.manager.jooq.tables.records.RoleWorkerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleWorker extends TableImpl<RoleWorkerRecord> {

    private static final long serialVersionUID = 1028360014;

    /**
     * The reference instance of <code>company.role_worker</code>
     */
    public static final RoleWorker ROLE_WORKER = new RoleWorker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleWorkerRecord> getRecordType() {
        return RoleWorkerRecord.class;
    }

    /**
     * The column <code>company.role_worker.worker_id</code>.
     */
    public final TableField<RoleWorkerRecord, Integer> WORKER_ID = createField(DSL.name("worker_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>company.role_worker.role_id</code>.
     */
    public final TableField<RoleWorkerRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>company.role_worker</code> table reference
     */
    public RoleWorker() {
        this(DSL.name("role_worker"), null);
    }

    /**
     * Create an aliased <code>company.role_worker</code> table reference
     */
    public RoleWorker(String alias) {
        this(DSL.name(alias), ROLE_WORKER);
    }

    /**
     * Create an aliased <code>company.role_worker</code> table reference
     */
    public RoleWorker(Name alias) {
        this(alias, ROLE_WORKER);
    }

    private RoleWorker(Name alias, Table<RoleWorkerRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoleWorker(Name alias, Table<RoleWorkerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RoleWorker(Table<O> child, ForeignKey<O, RoleWorkerRecord> key) {
        super(child, key, ROLE_WORKER);
    }

    @Override
    public Schema getSchema() {
        return Company.COMPANY;
    }

    @Override
    public List<ForeignKey<RoleWorkerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoleWorkerRecord, ?>>asList(Keys.ROLE_WORKER__ROLE_WORKER_WORKER_ID_FKEY, Keys.ROLE_WORKER__ROLE_WORKER_ROLE_ID_FKEY);
    }

    public Worker worker() {
        return new Worker(this, Keys.ROLE_WORKER__ROLE_WORKER_WORKER_ID_FKEY);
    }

    public Role role() {
        return new Role(this, Keys.ROLE_WORKER__ROLE_WORKER_ROLE_ID_FKEY);
    }

    @Override
    public RoleWorker as(String alias) {
        return new RoleWorker(DSL.name(alias), this);
    }

    @Override
    public RoleWorker as(Name alias) {
        return new RoleWorker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleWorker rename(String name) {
        return new RoleWorker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleWorker rename(Name name) {
        return new RoleWorker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
