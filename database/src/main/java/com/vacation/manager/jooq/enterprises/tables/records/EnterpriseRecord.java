/*
 * This file is generated by jOOQ.
 */
package com.vacation.manager.jooq.enterprises.tables.records;


import com.vacation.manager.jooq.enterprises.tables.Enterprise;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EnterpriseRecord extends UpdatableRecordImpl<EnterpriseRecord> implements Record3<Integer, String, Float> {

    private static final long serialVersionUID = -1897511621;

    /**
     * Setter for <code>enterprises.enterprise.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>enterprises.enterprise.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>enterprises.enterprise.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>enterprises.enterprise.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>enterprises.enterprise.free_days</code>.
     */
    public void setFreeDays(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>enterprises.enterprise.free_days</code>.
     */
    public Float getFreeDays() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Enterprise.ENTERPRISE.ID;
    }

    @Override
    public Field<String> field2() {
        return Enterprise.ENTERPRISE.NAME;
    }

    @Override
    public Field<Float> field3() {
        return Enterprise.ENTERPRISE.FREE_DAYS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Float component3() {
        return getFreeDays();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Float value3() {
        return getFreeDays();
    }

    @Override
    public EnterpriseRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public EnterpriseRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public EnterpriseRecord value3(Float value) {
        setFreeDays(value);
        return this;
    }

    @Override
    public EnterpriseRecord values(Integer value1, String value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EnterpriseRecord
     */
    public EnterpriseRecord() {
        super(Enterprise.ENTERPRISE);
    }

    /**
     * Create a detached, initialised EnterpriseRecord
     */
    public EnterpriseRecord(Integer id, String name, Float freeDays) {
        super(Enterprise.ENTERPRISE);

        set(0, id);
        set(1, name);
        set(2, freeDays);
    }
}
